{
	"info": {
		"_postman_id": "d61a9ba3-5b04-4e9d-b213-60e23ba26023",
		"name": "Colibri-Prod-PHP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20553787",
		"_collection_link": "https://gold-water-624989.postman.co/workspace/My-Workspace~819e005b-bdc7-4c2a-8d63-792032977819/collection/26910817-d61a9ba3-5b04-4e9d-b213-60e23ba26023?action=share&creator=20553787&source=collection_link"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"lastLogin\"];\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"pm.collectionVariables.set(\"token_prod\", jsonData.item[\"token\"]);\r",
									"pm.collectionVariables.set(\"email_prod\", jsonData.item[\"email\"]);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"ikonictest@gmail.com\",\"password\":\"Password1\"}"
						},
						"url": {
							"raw": "{{baseurl_prod}}/auth/login",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"lastLogin\"];\r",
									"delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.set(\"token_dev\", responseB.item[\"token\"]);\r",
									"pm.collectionVariables.set(\"email_dev\", responseB.item[\"email\"]);\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"ikonictest@gmail.com\",\"password\":\"Password1\"}"
						},
						"url": {
							"raw": "{{baseurl_dev}}/auth/login",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login SSO-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"lastLogin\"];\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{email_prod}}\",\"token\":\"{{token_prod}}\"}"
						},
						"url": {
							"raw": "{{baseurl_prod}}/auth/login-sso",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"auth",
								"login-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login SSO-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"lastLogin\"];\r",
									"delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{email_dev}}\",\"token\":\"{{token_dev}}\"}"
						},
						"url": {
							"raw": "{{baseurl_dev}}/auth/login-sso",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"auth",
								"login-sso"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Out-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseurl_prod}}/auth/logout",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Out-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseurl_dev}}/auth/logout",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Password Rest-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"Updatecode_prod\", jsonData.item[\"code\"]);\r",
									"\r",
									"if(pm.response.code == \"200\"){\r",
									"    pm.collectionVariables.set(\"responseA\", 'success');\r",
									"}else{\r",
									"    pm.collectionVariables.set(\"responseA\", 'fail');\r",
									"}\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "undefined",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{email_prod}}\"}"
						},
						"url": {
							"raw": "{{baseurl_prod}}/auth/request-password-reset",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"auth",
								"request-password-reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Password Rest-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"Updatecode_dev\", jsonData.item[\"code\"]);\r",
									"\r",
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"if(pm.response.code == \"200\"){\r",
									"  pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(\"success\");\r",
									"});\r",
									"}else{\r",
									"     pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(\"fail\");\r",
									"});\r",
									"}\r",
									"\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "undefined",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{email_dev}}\"}"
						},
						"url": {
							"raw": "{{baseurl_dev}}/auth/request-password-reset",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"auth",
								"request-password-reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Password - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"created\"];\r",
									"delete jsonData.item[\"lastLogin\"];\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"ikonictest@gmail.com\",\"password\":\"Password1\",\"code\":\"{{Updatecode_prod}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/auth/update-password",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"auth",
								"update-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Password - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"lastLogin\"];\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"created\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"ikonictest@gmail.com\",\"password\":\"Password1\",\"code\":\"{{Updatecode_dev}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/auth/update-password",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"auth",
								"update-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enrollments",
			"item": [
				{
					"name": "Get Enrollments-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.page;\r",
									"delete jsonData.pages;\r",
									"delete jsonData.itemsPerPage;\r",
									"delete jsonData.total;\r",
									"delete jsonData.itemsCount;\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments?includes[]=exam&includes[]=organization&token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "exam"
								},
								{
									"key": "includes[]",
									"value": "organization"
								},
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Enrollments-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.page;\r",
									"delete responseB.pages;\r",
									"delete responseB.itemsPerPage;\r",
									"delete responseB.total;\r",
									"delete responseB.itemsCount;\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_dev}}/enrollments?includes[]=exam&includes[]=organization&token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "exam"
								},
								{
									"key": "includes[]",
									"value": "organization"
								},
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Enrollments-Prod Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.page;\r",
									"delete jsonData.pages;\r",
									"delete jsonData.itemsPerPage;\r",
									"delete jsonData.total;\r",
									"delete jsonData.itemsCount;\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments?filters[0][property]=examId&filters[0][value]=7&filters[0][condition]=eq&orderBy[0][property]=created&orderBy[0][value]=desc&token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments"
							],
							"query": [
								{
									"key": "filters[0][property]",
									"value": "examId"
								},
								{
									"key": "filters[0][value]",
									"value": "7"
								},
								{
									"key": "filters[0][condition]",
									"value": "eq"
								},
								{
									"key": "orderBy[0][property]",
									"value": "created"
								},
								{
									"key": "orderBy[0][value]",
									"value": "desc"
								},
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Enrollments-Dev Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.page;\r",
									"delete responseB.pages;\r",
									"delete responseB.itemsPerPage;\r",
									"delete responseB.total;\r",
									"delete responseB.itemsCount;\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_dev}}/enrollments?filters[0][property]=examId&filters[0][value]=7&filters[0][condition]=eq&orderBy[0][property]=created&orderBy[0][value]=desc&token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments"
							],
							"query": [
								{
									"key": "filters[0][property]",
									"value": "examId"
								},
								{
									"key": "filters[0][value]",
									"value": "7"
								},
								{
									"key": "filters[0][condition]",
									"value": "eq"
								},
								{
									"key": "orderBy[0][property]",
									"value": "created"
								},
								{
									"key": "orderBy[0][value]",
									"value": "desc"
								},
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Enrollment by id-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Enrollment by id-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"ikonictest@gmail.com\",\"password\":\"Password1\"}"
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "simulated-exam Enrollment By ID-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.page;\r",
									"delete jsonData.pages;\r",
									"delete jsonData.itemsPerPage;\r",
									"delete jsonData.total;\r",
									"delete jsonData.itemsCount;\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/simulated-exam-attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"simulated-exam-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "simulated-exam Enrollment By ID-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.page;\r",
									"delete responseB.pages;\r",
									"delete responseB.itemsPerPage;\r",
									"delete responseB.total;\r",
									"delete responseB.itemsCount;\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/simulated-exam-attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"simulated-exam-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pre-assessment-attempts Enrollment By ID-prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/pre-assessment-attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"pre-assessment-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pre-assessment-attempts Enrollment By ID -Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/pre-assessment-attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"pre-assessment-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assessment-Attempts Enrollment By ID-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/assessment-attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"assessment-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assessment-Attempts Enrollment By ID-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/assessment-attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"assessment-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Practice Attempt Questions by Module id and Enrolement Id-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/modules/:moduleID/practice-attempt-questions?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"modules",
								":moduleID",
								"practice-attempt-questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "moduleID",
									"value": "146"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Practice Attempt Questions by Module id and Enrolement Id -dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/modules/:moduleID/practice-attempt-questions?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"modules",
								":moduleID",
								"practice-attempt-questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "moduleID",
									"value": "146"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "practice-attempts - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/modules/:moduleID/practice-attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"modules",
								":moduleID",
								"practice-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "moduleID",
									"value": "146"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Practice-attempts - dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"//delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/modules/:moduleID/practice-attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"modules",
								":moduleID",
								"practice-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "moduleID",
									"value": "146"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "progresses - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData[\"total\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/progresses?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "progresses - dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB[\"total\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/progresses?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progresses by ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/progresses/:progressID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "progressID",
									"value": "4676283"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progresses by ID - dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/progresses/:progressID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "progressID",
									"value": "4676283"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progress ID Questions - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/progresses/:progressID/questions?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID",
								"questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "progressID",
									"value": "4676283"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progress ID Questions-DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/progresses/:progressID/questions?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID",
								"questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "progressID",
									"value": "4676283"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progresses-details - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/progresses/:progressID/details?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID",
								"details"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "progressID",
									"value": "4676283"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progresses-details - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/progresses/:progressID/details?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID",
								"details"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "211889"
								},
								{
									"key": "progressID",
									"value": "4676283"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update enrollments - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"expiration\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\"showPreAssessment\": true}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update enrollments - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"expiration\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\"showPreAssessment\": true}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Bulk progresses - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.items[0][\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n            \"id\": 5480026,\r\n             \"attempts\": 4,\r\n            \"correct\": 2\r\n        }]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/progresses?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Bulk progresses - dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.items[0][\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n            \"id\": 5480026,\r\n             \"attempts\": 4,\r\n            \"correct\": 2\r\n        }]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/progresses?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Progress By ID - PROD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": 5480026,\r\n            \"questionCount\": 79,\r\n            \"attempts\": 4,\r\n            \"correct\": 2,\r\n            \"incorrect\": 2}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/progresses/:progressID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "progressID",
									"value": "5480026"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Progress By ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": 5480026,\r\n            \"questionCount\": 79,\r\n            \"attempts\": 4,\r\n            \"correct\": 2,\r\n            \"incorrect\": 2}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/progresses/:progressID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "progressID",
									"value": "5480026"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progresses-Questions-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"bookmarked\": true, \"id\": 1185}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/progresses/:progressID/questions/:questionID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID",
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "progressID",
									"value": "5480025"
								},
								{
									"key": "questionID",
									"value": "1185"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progresses-Questions-ID - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"bookmarked\": true, \"id\": 1185}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/progresses/:progressID/questions/:questionID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID",
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "progressID",
									"value": "5480025"
								},
								{
									"key": "questionID",
									"value": "1185"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE enrollments - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"userId\": 334440,\r\n    \"examId\": 167,\r\n    \"organizationId\": 1000,\r\n    \"status\": 1,\r\n    \"type\": 0,\r\n    \"started\": null,\r\n    \"expiration\": 1711108730,\r\n    \"totalTime\": null,\r\n    \"score\": null,\r\n    \"showPreAssessment\": true,\r\n    \"exam\": null,\r\n    \"organization\": null,\r\n    \"progresses\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE enrollments - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"if(pm.response.code != \"400\"){\r",
									"    pm.test(\"Compare responses\", function () {\r",
									"        \r",
									"        pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"    });\r",
									"}else{\r",
									"     pm.test(\"Body matches string\", function () {\r",
									"         pm.expect(pm.response.text()).to.include(\"already has an enrollment\");\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 334440,\r\n    \"examId\": 110,\r\n    \"organizationId\": 1000,\r\n    \"status\": 1,\r\n    \"type\": 0,\r\n    \"started\": null,\r\n    \"expiration\": 1711108730,\r\n    \"totalTime\": null,\r\n    \"score\": null,\r\n    \"showPreAssessment\": true,\r\n    \"exam\": null,\r\n    \"organization\": null,\r\n    \"progresses\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE Pending enrollments - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 13468,\r\n    \"email\": \"IkonicTest@gmail.com\",\r\n    \"firstName\": \"Cody\",\r\n    \"lastName\": \"Mcclintock\",\r\n    \"productIds\":1052\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/pending-enrollments?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"pending-enrollments"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE Pending enrollments - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 13468,\r\n    \"email\": \"IkonicTest@gmail.com\",\r\n    \"firstName\": \"Cody\",\r\n    \"lastName\": \"Mcclintock\",\r\n    \"productIds\":1052\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/pending-enrollments?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"pending-enrollments"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable Enrollment By ID-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"expiration\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/disable?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"disable"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable Enrollment By ID-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"expiration\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/disable?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"disable"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable Enrollment By ID-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"expiration\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/enable?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"enable"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable Enrollment By ID-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"expiration\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/enable?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"enable"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ExtendEnrollment By ID-Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"if(pm.response.code != \"400\"){\r",
									"    delete jsonData.item[\"modified\"];\r",
									"    delete jsonData.item[\"expiration\"];\r",
									"}\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"days\": 5\r\n}"
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/extend?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"extend"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "18573"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ExtendEnrollment By ID-Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"if(pm.response.code != \"400\"){\r",
									"    delete responseB.item[\"modified\"];\r",
									"    delete responseB.item[\"expiration\"];\r",
									"}\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"days\": 5\r\n}"
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/extend?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"extend"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "18573"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module Attempts - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"id\"];\r",
									"delete jsonData.item[\"created\"];\r",
									"delete jsonData.item.enrollment[\"modified\"];\r",
									"delete jsonData.item.enrollment[\"expiration\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"practice\",\r\n    \"questionCount\": 20,\r\n    \"correct\": 9,\r\n    \"incorrect\": 11,\r\n    \"score\": 40,\r\n    \"bookmarked\": 0,\r\n    \"unbookmarked\": 0,\r\n    \"totalTime\": 900,\r\n    \"module\": null,\r\n    \"enrollment\": null,\r\n\"quantity\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/modules/:moduleID/attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"modules",
								":moduleID",
								"attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "moduleID",
									"value": "101"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module Attempts - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"id\"];\r",
									"delete responseB.item[\"created\"];\r",
									"delete responseB.item.enrollment[\"modified\"];\r",
									"delete responseB.item.enrollment[\"expiration\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"practice\",\r\n    \"questionCount\": 20,\r\n    \"correct\": 9,\r\n    \"incorrect\": 11,\r\n    \"score\": 40,\r\n    \"bookmarked\": 0,\r\n    \"unbookmarked\": 0,\r\n    \"totalTime\": 900,\r\n    \"module\": null,\r\n    \"enrollment\": null,\r\n\"quantity\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/modules/:moduleID/attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"modules",
								":moduleID",
								"attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "moduleID",
									"value": "101"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progresses Recalculate - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": 5480026}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/progresses/:progressID/recalculate?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID",
								"recalculate"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "progressID",
									"value": "5480026"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Progresses Recalculate - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": 5480026}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/progresses/:progressID/recalculate?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"progresses",
								":progressID",
								"recalculate"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "progressID",
									"value": "5480026"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type Progresses - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"questionCount\": 79,\r\n            \"attempts\": 4,\r\n            \"correct\": 4,\r\n            \"incorrect\": 4,\r\n            \"bookmarked\": 1,\r\n            \"score\": 35\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/enrollments/:enrollmentID/modules/:moduleID/practice-progresses?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"modules",
								":moduleID",
								"practice-progresses"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "moduleID",
									"value": "101"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type Progresses - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"// pm.test(\"Compare responses\", function () {\r",
									"//     pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"// });\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"questionCount\": 79,\r\n            \"attempts\": 4,\r\n            \"correct\": 4,\r\n            \"incorrect\": 4,\r\n            \"bookmarked\": 1,\r\n            \"score\": 35\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/enrollments/:enrollmentID/modules/:moduleID/practice-progresses?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"enrollments",
								":enrollmentID",
								"modules",
								":moduleID",
								"practice-progresses"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "enrollmentID",
									"value": "245625"
								},
								{
									"key": "moduleID",
									"value": "101"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Modules",
			"item": [
				{
					"name": "Modules - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/modules?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"modules"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"//\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/modules?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"modules"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/modules?token={{token_prod}}&filters[0][property]=industryId&filters[0][value]=7&filters[0][condition]=eq",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"modules"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "filters[0][property]",
									"value": "industryId"
								},
								{
									"key": "filters[0][value]",
									"value": "7"
								},
								{
									"key": "filters[0][condition]",
									"value": "eq"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"//\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/modules?token={{token_dev}}&filters[0][property]=industryId&filters[0][value]=7&filters[0][condition]=eq",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"modules"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "filters[0][property]",
									"value": "industryId"
								},
								{
									"key": "filters[0][value]",
									"value": "7"
								},
								{
									"key": "filters[0][condition]",
									"value": "eq"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules by ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/modules/:moduleID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules by ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/modules/:moduleID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules by ID(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/modules/:moduleID?token={{token_prod}}&includes[]=industry&includes[]=state&includes[]=preassessmentBank&includes[]=studyBank\n&includes[]=practiceBank&includes[]=examBank&includes[]=examModule",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "includes[]",
									"value": "industry"
								},
								{
									"key": "includes[]",
									"value": "state"
								},
								{
									"key": "includes[]",
									"value": "preassessmentBank"
								},
								{
									"key": "includes[]",
									"value": "studyBank\n"
								},
								{
									"key": "includes[]",
									"value": "practiceBank"
								},
								{
									"key": "includes[]",
									"value": "examBank"
								},
								{
									"key": "includes[]",
									"value": "examModule"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules by ID(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/modules/:moduleID?token={{token_dev}}&includes[]=industry&includes[]=state&includes[]=preassessmentBank&includes[]=studyBank\n&includes[]=practiceBank&includes[]=examBank&includes[]=examModule",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "includes[]",
									"value": "industry"
								},
								{
									"key": "includes[]",
									"value": "state"
								},
								{
									"key": "includes[]",
									"value": "preassessmentBank"
								},
								{
									"key": "includes[]",
									"value": "studyBank\n"
								},
								{
									"key": "includes[]",
									"value": "practiceBank"
								},
								{
									"key": "includes[]",
									"value": "examBank"
								},
								{
									"key": "includes[]",
									"value": "examModule"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Questions by Module-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/modules/:moduleID/questions?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"modules",
								":moduleID",
								"questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Questions by Module-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/modules/:moduleID/questions?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"modules",
								":moduleID",
								"questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Question-By-Types - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"const items= jsonData.items;\r",
									"\r",
									"for (const [reqKey, reqValue] of Object.entries(items)) {\r",
									" const answers =   reqValue.answers\r",
									"   delete reqValue[\"created\"];\r",
									"   delete reqValue[\"modified\"];\r",
									" for (const [key, value] of Object.entries(answers)) {\r",
									"   delete value[\"created\"];\r",
									"   delete value[\"modified\"];\r",
									"   delete value[\"question\"];\r",
									" }\r",
									"\r",
									"}\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/modules/:moduleID/types/study/questions?includes[]=answers&token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"modules",
								":moduleID",
								"types",
								"study",
								"questions"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "answers"
								},
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "846"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Question-By-Types - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"const items= responseB.items;\r",
									"\r",
									"for (const [reqKey, reqValue] of Object.entries(items)) {\r",
									" const answers =   reqValue.answers\r",
									"   delete reqValue[\"created\"];\r",
									"   delete reqValue[\"modified\"];\r",
									" for (const [key, value] of Object.entries(answers)) {\r",
									"   delete value[\"created\"];\r",
									"   delete value[\"modified\"];\r",
									"   delete value[\"question\"];\r",
									" }\r",
									"\r",
									"}\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/modules/:moduleID/types/study/questions?includes[]=answers&token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"modules",
								":moduleID",
								"types",
								"study",
								"questions"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "answers"
								},
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "846"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Module by ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":59,\r\n    \"description\": \"Practice of Real Estate\",\r\n    \"industryId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/modules/:moduleID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "57"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Module by ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":59,\r\n    \"description\": \"Practice of Real Estate\",\r\n    \"industryId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/modules/:moduleID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "57"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules-ID-types-type_name-questions-ID - Prod",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/modules/:moduleID/types/:type_name/questions/:questionID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"modules",
								":moduleID",
								"types",
								":type_name",
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "1004"
								},
								{
									"key": "type_name",
									"value": "preassessment"
								},
								{
									"key": "questionID",
									"value": "14265"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules-ID-types-type_name-questions-ID - Dev",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/modules/:moduleID/types/:type_name/questions/:questionID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"modules",
								":moduleID",
								"types",
								":type_name",
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleID",
									"value": "5"
								},
								{
									"key": "type_name",
									"value": "preassessment"
								},
								{
									"key": "questionID",
									"value": "94594"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import - prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "RAMRPTest.xlsx"
								}
							]
						},
						"url": {
							"raw": "{{baseurl_prod}}/modules/import?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"modules",
								"import"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "RAMRPTest.xlsx"
								}
							]
						},
						"url": {
							"raw": "{{baseurl_dev}}/modules/import?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"modules",
								"import"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ModuleAttempt",
			"item": [
				{
					"name": "Module-Attempts-Question-Attempts-By-Module-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/module-attempts/:moduleAttemptID/question-attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts-Question-Attempts-By-Module-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/module-attempts/:moduleAttemptID/question-attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts-Progress-Questions-ModuleAttemptId - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/module-attempts/:moduleAttemptID/progress-questions?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID",
								"progress-questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts-Progress-Questions-ModuleAttemptId - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/module-attempts/:moduleAttemptID/progress-questions?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID",
								"progress-questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts by ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/module-attempts/:moduleAttemptID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts by ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/module-attempts/:moduleAttemptID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts by ID(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/module-attempts/:moduleAttemptID?token={{token_prod}}&includes[]=module&includes[]=enrollment",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "includes[]",
									"value": "module"
								},
								{
									"key": "includes[]",
									"value": "enrollment"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts by ID(2) - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/module-attempts/:moduleAttemptID?token={{token_dev}}&includes[]=module&includes[]=enrollment",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "includes[]",
									"value": "module"
								},
								{
									"key": "includes[]",
									"value": "enrollment"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts-Progress-Questions-ModuleAttemptId - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"const items= jsonData.items;\r",
									"//console.log(\"==items=\"+items);\r",
									"for (const [reqKey, reqValue] of Object.entries(items)) {\r",
									" delete reqValue[\"modified\"];\r",
									"\r",
									"}\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\"id\":462603218,\"moduleAttemptId\":29610103,\"questionId\":13002,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":false,\"bookmarked\":false,\"answer\":43881,\"sort\":1,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":true,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":13002,\"id\":378478832,\"viewed\":2,\"answered\":true,\"correct\":false,\"bookmarked\":false}},{\"id\":462603219,\"moduleAttemptId\":29610103,\"questionId\":12998,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":false,\"bookmarked\":false,\"answer\":43865,\"sort\":2,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":true,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":12998,\"id\":378478828,\"viewed\":2,\"answered\":true,\"correct\":false,\"bookmarked\":false}},{\"id\":462603220,\"moduleAttemptId\":29610103,\"questionId\":18317,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":true,\"bookmarked\":true,\"answer\":61843,\"sort\":3,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":false,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":18317,\"id\":378478843,\"viewed\":2,\"answered\":true,\"correct\":true,\"bookmarked\":true}},{\"id\":462603221,\"moduleAttemptId\":29610103,\"questionId\":18314,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":true,\"bookmarked\":false,\"answer\":61831,\"sort\":4,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":false,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":18314,\"id\":378478840,\"viewed\":2,\"answered\":true,\"correct\":true,\"bookmarked\":false}},{\"id\":462603222,\"moduleAttemptId\":29610103,\"questionId\":13005,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":false,\"bookmarked\":false,\"answer\":43894,\"sort\":5,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":true,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":13005,\"id\":378478835,\"viewed\":2,\"answered\":true,\"correct\":false,\"bookmarked\":false}}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/module-attempts/:moduleAttemptID/question-attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts-Progress-Questions-ModuleAttemptId - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"const items= responseB.items;\r",
									"//console.log(\"==items=\"+items);\r",
									"for (const [reqKey, reqValue] of Object.entries(items)) {\r",
									" delete reqValue[\"modified\"];\r",
									"\r",
									"}\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\"id\":462603218,\"moduleAttemptId\":29610103,\"questionId\":13002,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":false,\"bookmarked\":false,\"answer\":43881,\"sort\":1,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":true,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":13002,\"id\":378478832,\"viewed\":2,\"answered\":true,\"correct\":false,\"bookmarked\":false}},{\"id\":462603219,\"moduleAttemptId\":29610103,\"questionId\":12998,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":false,\"bookmarked\":false,\"answer\":43865,\"sort\":2,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":true,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":12998,\"id\":378478828,\"viewed\":2,\"answered\":true,\"correct\":false,\"bookmarked\":false}},{\"id\":462603220,\"moduleAttemptId\":29610103,\"questionId\":18317,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":true,\"bookmarked\":true,\"answer\":61843,\"sort\":3,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":false,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":18317,\"id\":378478843,\"viewed\":2,\"answered\":true,\"correct\":true,\"bookmarked\":true}},{\"id\":462603221,\"moduleAttemptId\":29610103,\"questionId\":18314,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":true,\"bookmarked\":false,\"answer\":61831,\"sort\":4,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":false,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":18314,\"id\":378478840,\"viewed\":2,\"answered\":true,\"correct\":true,\"bookmarked\":false}},{\"id\":462603222,\"moduleAttemptId\":29610103,\"questionId\":13005,\"view\":null,\"viewed\":1,\"answered\":true,\"correct\":false,\"bookmarked\":false,\"answer\":43894,\"sort\":5,\"created\":1681390021,\"modified\":null,\"question\":null,\"moduleAttempt\":null,\"incorrect\":true,\"progressQuestion\":{\"progressId\":8606602,\"questionId\":13005,\"id\":378478835,\"viewed\":2,\"answered\":true,\"correct\":false,\"bookmarked\":false}}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/module-attempts/:moduleAttemptID/question-attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Module-Attempts By ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\"correct\": 2,\r\n        \"incorrect\": 1,\r\n         \"id\": \"2062890\",\r\n           \"enrollmentId\": 374903,\r\n        \"moduleId\": 187,\r\n         \"type\": \"study\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/module-attempts/:moduleAttemptID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Module-Attempts By ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\"correct\": 2,\r\n        \"incorrect\": 1,\r\n         \"id\": \"2062890\",\r\n           \"enrollmentId\": 374903,\r\n        \"moduleId\": 187,\r\n         \"type\": \"study\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/module-attempts/:moduleAttemptID0?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"module-attempts",
								":moduleAttemptID0"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "moduleAttemptID0",
									"value": "2062890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"id\"];\r",
									"delete jsonData.item[\"created\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"enrollmentId\":374903,\"moduleId\":185,\"type\":\"practice\",\"filter\":\"\",\"quantity\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/module-attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"module-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Module-Attempts - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"id\"];\r",
									"delete responseB.item[\"created\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"enrollmentId\":374903,\"moduleId\":185,\"type\":\"practice\",\"filter\":\"\",\"quantity\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/module-attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"module-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ModuleAttemptQuestion",
			"item": [
				{
					"name": "ModuleAttemptQuestion - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/module-attempt-questions/29610113/?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"module-attempt-questions",
								"29610113",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ModuleAttemptQuestion - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/module-attempt-questions/29610113/?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"module-attempt-questions",
								"29610113",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ModuleQuestion",
			"item": [
				{
					"name": "ModuleQuestion - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/module-questions?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"module-questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ModuleQuestion - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/module-questions?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"module-questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Exam",
			"item": [
				{
					"name": "Get Exam Modules - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].created;\r",
									"        delete jsonData.items[i].modified;\r",
									"        delete jsonData.items[i].id;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/exams/:examID/modules?includes[]=module&token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":examID",
								"modules"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "module"
								},
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Exam Modules - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"         delete responseB.items[i].created;\r",
									"        delete responseB.items[i].modified;\r",
									"         delete responseB.items[i].id;\r",
									"    }\r",
									"}\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/exams/:examID/modules?includes[]=module&token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":examID",
								"modules"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "module"
								},
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All exams - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/exams?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All exams - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/exams?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All exams(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/exams?token={{token_prod}}&filters[0][property]=industryId&filters[0][value]=7&filters[0][condition]=eq&orderBy[0][property]=created&orderBy[0][value]=desc",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "filters[0][property]",
									"value": "industryId"
								},
								{
									"key": "filters[0][value]",
									"value": "7"
								},
								{
									"key": "filters[0][condition]",
									"value": "eq"
								},
								{
									"key": "orderBy[0][property]",
									"value": "created"
								},
								{
									"key": "orderBy[0][value]",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All exams(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/exams?token={{token_dev}}&filters[0][property]=industryId&filters[0][value]=7&filters[0][condition]=eq&orderBy[0][property]=created&orderBy[0][value]=desc",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "filters[0][property]",
									"value": "industryId"
								},
								{
									"key": "filters[0][value]",
									"value": "7"
								},
								{
									"key": "filters[0][condition]",
									"value": "eq"
								},
								{
									"key": "orderBy[0][property]",
									"value": "created"
								},
								{
									"key": "orderBy[0][value]",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exams by ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/exams/:examID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":examID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exams by ID - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/exams/:examID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":examID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exams by ID(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/exams/:examID?token={{token_prod}}&includes[]=industry&includes[]=state",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":examID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "includes[]",
									"value": "industry"
								},
								{
									"key": "includes[]",
									"value": "state"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exams by ID(2) - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/exams/:examID?token={{token_dev}}&includes[]=industry&includes[]=state",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":examID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "includes[]",
									"value": "industry"
								},
								{
									"key": "includes[]",
									"value": "state"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exams by Code - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"created\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/exams/:code?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":code"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "code",
									"value": "RESAMP0Test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exams by Code - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"created\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/exams/:code?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":code"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "code",
									"value": "RESAMP0Test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Exams by ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\"id\": 10,\r\n        \"code\": \"APNAT0215\",\r\n        \"industryId\": 2}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/exams/:examID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":examID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Exams by ID - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\"id\": 10,\r\n        \"code\": \"APNAT0215\",\r\n        \"industryId\": 2}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/exams/:examID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":examID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update bulk modules by Exam ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"    }\r",
									"}\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"id\": 354,\r\n            \"examId\": 10,\r\n            \"moduleId\": 203,\r\n            \"preassessmentQuestions\": 5,\r\n            \"practiceQuestions\": 20,\r\n            \"examQuestions\": 15}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/exams/:examID/modules?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":examID",
								"modules"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update bulk modules by Exam ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"    }\r",
									"}\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"id\": 354,\r\n            \"examId\": 10,\r\n            \"moduleId\": 203,\r\n            \"preassessmentQuestions\": 5,\r\n            \"practiceQuestions\": 20,\r\n            \"examQuestions\": 15}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/exams/:examID/modules?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":examID",
								"modules"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Exam-ID-module-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"created\"];\r",
									"delete jsonData.item[\"id\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"examId\" : 10,\r\n\"examQuestions\" : 3,\r\n\"moduleId\" : 696,\r\n\"name\" : \"RECAD\",\r\n\"practiceQuestions\" : 5,\r\n\"preassessmentQuestions\" : 1,\r\n\"sort\" : 21\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/exams/:examID/modules/:moduleID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":examID",
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								},
								{
									"key": "moduleID",
									"value": "696"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Exam-ID-module-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"created\"];\r",
									"delete responseB.item[\"id\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"examId\" : 10,\r\n\"examQuestions\" : 3,\r\n\"moduleId\" : 696,\r\n\"name\" : \"RECAD\",\r\n\"practiceQuestions\" : 5,\r\n\"preassessmentQuestions\" : 1,\r\n\"sort\" : 21\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/exams/:examID/modules/:moduleID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":examID",
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								},
								{
									"key": "moduleID",
									"value": "696"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Exam-ID-module-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"created\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4135,\r\n\"examId\" : 10,\r\n\"moduleId\" : 696,\r\n\"name\" : \"RECAD12\",\r\n\"practiceQuestions\" : 6,\r\n\"preassessmentQuestions\" : 1,\r\n\"sort\" : 15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/exams/:examID/modules/:moduleID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":examID",
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								},
								{
									"key": "moduleID",
									"value": "696"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Exam-ID-module-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"created\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4135,\r\n\"examId\" : 10,\r\n\"moduleId\" : 696,\r\n\"name\" : \"RECAD12\",\r\n\"practiceQuestions\" : 6,\r\n\"preassessmentQuestions\" : 1,\r\n\"sort\" : 15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/exams/:examID/modules/:moduleID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":examID",
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								},
								{
									"key": "moduleID",
									"value": "696"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Exam-ID-module-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4134\r\n}"
						},
						"url": {
							"raw": "{{baseurl_prod}}/exams/:examID/modules/:moduleID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":examID",
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								},
								{
									"key": "moduleID",
									"value": "696"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Exam-ID-module-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4134\r\n}"
						},
						"url": {
							"raw": "{{baseurl_dev}}/exams/:examID/modules/:moduleID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":examID",
								"modules",
								":moduleID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								},
								{
									"key": "moduleID",
									"value": "696"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam-Export - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"uri\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/exams/:examID/export?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								":examID",
								"export"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam-Export - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"uri\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/exams/:examID/export?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								":examID",
								"export"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "examID",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "RESAMP0Test.xlsx"
								}
							]
						},
						"url": {
							"raw": "{{baseurl_prod}}/exams/import?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"exams",
								"import"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "RESAMP0Test.xlsx"
								}
							]
						},
						"url": {
							"raw": "{{baseurl_dev}}/exams/import?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"exams",
								"import"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AssessmentAttempt",
			"item": [
				{
					"name": "GET Assessment-attempts-ID-question-attempts - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/assessment-attempts/:assessment-attemptID/question-attempts?includes[]=question&includes[]=question.answers&page=0&pageSize=0&token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "question"
								},
								{
									"key": "includes[]",
									"value": "question.answers"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "0"
								},
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1975805"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Assessment-attempts-ID-question-attempts  - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/assessment-attempts/:assessment-attemptID/question-attempts?includes[]=question&includes[]=question.answers&page=0&pageSize=0&token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "question"
								},
								{
									"key": "includes[]",
									"value": "question.answers"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "0"
								},
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1975805"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Assessment-attempts-ID-question-attempts(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/assessment-attempts/:assessment-attemptID/question-attempts?includes[]=assessmentAttempt&includes[]=question&includes[]=module&token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "assessmentAttempt"
								},
								{
									"key": "includes[]",
									"value": "question"
								},
								{
									"key": "includes[]",
									"value": "module"
								},
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1975805"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Assessment-attempts-ID-question-attempts(2)  - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/assessment-attempts/:assessment-attemptID/question-attempts?includes[]=assessmentAttempt&includes[]=question&includes[]=module&token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "assessmentAttempt"
								},
								{
									"key": "includes[]",
									"value": "question"
								},
								{
									"key": "includes[]",
									"value": "module"
								},
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1975805"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE Assessment-Attempts-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n        {\r\n            \"id\": 1247253,\r\n            \"moduleId\": 67,\r\n            \"questionId\": 6562,\r\n            \"view\": null,\r\n            \"viewed\": true,\r\n            \"answered\": true,\r\n            \"correct\": true,\r\n            \"bookmarked\": true,\r\n            \"sort\": 1\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/assessment-attempts/:assessment-attemptID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1247253"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE Assessment-Attempts-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n        {\r\n            \"id\": 1247253,\r\n            \"moduleId\": 67,\r\n            \"questionId\": 6562,\r\n            \"view\": null,\r\n            \"viewed\": true,\r\n            \"answered\": true,\r\n            \"correct\": true,\r\n            \"bookmarked\": true,\r\n            \"sort\": 1\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/assessment-attempts/:assessment-attemptID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1247253"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "assessment-attempts-ID-question-attempts-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"id\": 211096956,\r\n            \"moduleId\": 185,\r\n            \"questionId\": 12260,\r\n            \"view\": null,\r\n            \"viewed\": true,\r\n            \"answered\": true,\r\n            \"correct\": true,\r\n            \"bookmarked\": false,\r\n            \"answer\": \"41257\",\r\n            \"sort\": 4\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/assessment-attempts/:assessment-attemptID/question-attempts/:question-attemptID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID",
								"question-attempts",
								":question-attemptID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1973723"
								},
								{
									"key": "question-attemptID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "assessment-attempts-ID-question-attempts-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"id\": 211096956,\r\n            \"moduleId\": 185,\r\n            \"questionId\": 12260,\r\n            \"view\": null,\r\n            \"viewed\": true,\r\n            \"answered\": true,\r\n            \"correct\": true,\r\n            \"bookmarked\": false,\r\n            \"answer\": \"41257\",\r\n            \"sort\": 4\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/assessment-attempts/:assessment-attemptID/question-attempts/:question-attemptID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID",
								"question-attempts",
								":question-attemptID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1973723"
								},
								{
									"key": "question-attemptID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "assessment-attempts-ID-question-attempts - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"    }\r",
									"}\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n            \"id\": 211096956,\r\n            \"moduleId\": 185,\r\n            \"questionId\": 12260,\r\n            \"view\": null,\r\n            \"viewed\": true,\r\n            \"answered\": true,\r\n            \"correct\": true,\r\n            \"bookmarked\": false,\r\n            \"answer\": \"41257\",\r\n            \"sort\": 4\r\n        }]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/assessment-attempts/:assessment-attemptID/question-attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1973723"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "assessment-attempts-ID-question-attempts - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"    }\r",
									"}\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n            \"id\": 211096956,\r\n            \"moduleId\": 185,\r\n            \"questionId\": 12260,\r\n            \"view\": null,\r\n            \"viewed\": true,\r\n            \"answered\": true,\r\n            \"correct\": true,\r\n            \"bookmarked\": false,\r\n            \"answer\": \"41257\",\r\n            \"sort\": 4\r\n        }]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/assessment-attempts/:assessment-attemptID/question-attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"assessment-attempts",
								":assessment-attemptID",
								"question-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "assessment-attemptID",
									"value": "1973723"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create assessment-attempts - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"completed\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"bookmarked\" : 2,\r\n\"completed\" : 2,\r\n\"correct\" : 1,\r\n\"incorrect\" : 1,\r\n\"questionCount\" : 125,\r\n\"totalTime\" : 159,\r\n\"type\" : \"simulatedexam\",\r\n\"id\":\"374903\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/assessment-attempts?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"assessment-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create assessment-attempts - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"completed\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"bookmarked\" : 2,\r\n\"completed\" : 2,\r\n\"correct\" : 1,\r\n\"incorrect\" : 1,\r\n\"questionCount\" : 125,\r\n\"totalTime\" : 159,\r\n\"type\" : \"simulatedexam\",\r\n\"id\":\"374903\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/assessment-attempts?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"assessment-attempts"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AssessmentAttemptQuestion",
			"item": [
				{
					"name": "Assessment-attempt-questions-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									" delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/assessment-attempt-questions/:questionID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"assessment-attempt-questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assessment-attempt-questions-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									" delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/assessment-attempt-questions/:questionID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"assessment-attempt-questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assessment-attempt-questions-ID(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									" delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/assessment-attempt-questions/:questionID?token={{token_prod}}&includes[]=assessmentAttempt&includes[]=question&includes[]=module",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"assessment-attempt-questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "includes[]",
									"value": "assessmentAttempt"
								},
								{
									"key": "includes[]",
									"value": "question"
								},
								{
									"key": "includes[]",
									"value": "module"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assessment-attempt-questions-ID(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									" delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/assessment-attempt-questions/:questionID?token={{token_dev}}&includes[]=assessmentAttempt&includes[]=question&includes[]=module",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"assessment-attempt-questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "includes[]",
									"value": "assessmentAttempt"
								},
								{
									"key": "includes[]",
									"value": "question"
								},
								{
									"key": "includes[]",
									"value": "module"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST assessment-attempt-questions-ID - Pro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									" delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 12260,\r\n        \"assessmentAttemptId\": 228,\r\n        \"moduleId\": 185,\r\n        \"questionId\": 12260,\r\n        \"view\": null,\r\n        \"viewed\": true,\r\n        \"answered\": true,\r\n        \"correct\": true,\r\n        \"bookmarked\": false,\r\n        \"answer\": \"41257\",\r\n        \"sort\": 4,\r\n        \"created\": 1424878867,\r\n        \"modified\": 1681884589,\r\n        \"assessmentAttempt\": null,\r\n        \"question\": null,\r\n        \"module\": null\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/assessment-attempt-questions/:questionID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"assessment-attempt-questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST assessment-attempt-questions-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									" delete responseB.item[\"modified\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 12260,\r\n        \"assessmentAttemptId\": 228,\r\n        \"moduleId\": 185,\r\n        \"questionId\": 12260,\r\n        \"view\": null,\r\n        \"viewed\": true,\r\n        \"answered\": true,\r\n        \"correct\": true,\r\n        \"bookmarked\": false,\r\n        \"answer\": \"41257\",\r\n        \"sort\": 4,\r\n        \"created\": 1424878867,\r\n        \"modified\": 1681884589,\r\n        \"assessmentAttempt\": null,\r\n        \"question\": null,\r\n        \"module\": null\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/assessment-attempt-questions/:questionID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"assessment-attempt-questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Question",
			"item": [
				{
					"name": "Question-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/questions/:questionID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Question-ID - Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/questions/:questionID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Question-ID - Prod Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/questions/:questionID?includes[]=questionBank&includes[]=answers&token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "questionBank"
								},
								{
									"key": "includes[]",
									"value": "answers"
								},
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Question-ID - Dev Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/questions/:questionID?includes[]=questionBank&includes[]=answers&token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "includes[]",
									"value": "questionBank"
								},
								{
									"key": "includes[]",
									"value": "answers"
								},
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Question-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 12260,\r\n        \"questionBankId\": 348,\r\n        \"type\": \"multi\",\r\n        \"questionText\": \"Regardless of the desire for a property in a particular market, if there is not general purchase ability linked to the desire within the market, the market is lacking\",\r\n        \"feedback\": \"The characteristic of purchase ability, or affordability, is known as effective demand or effective purchasing power.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/questions/:questionID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Question-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 12260,\r\n        \"questionBankId\": 348,\r\n        \"type\": \"multi\",\r\n        \"questionText\": \"Regardless of the desire for a property in a particular market, if there is not general purchase ability linked to the desire within the market, the market is lacking\",\r\n        \"feedback\": \"The characteristic of purchase ability, or affordability, is known as effective demand or effective purchasing power.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/questions/:questionID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"questions",
								":questionID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "12260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "questions-audits - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/questions/:questionID/audits?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"questions",
								":questionID",
								"audits"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "15715"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "questions-audits - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/questions/:questionID/audits?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"questions",
								":questionID",
								"audits"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "15715"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "questions-ID-answers-audits - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/questions/:questionID/answers/audits?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"questions",
								":questionID",
								"answers",
								"audits"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "15715"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "questions-ID-answers-audits -DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/questions/:questionID/answers/audits?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"questions",
								":questionID",
								"answers",
								"audits"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "questionID",
									"value": "15715"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.items[0][\"created\"];\r",
									"delete jsonData.items[0][\"modifiedById\"];\r",
									"delete jsonData.items[0][\"modified\"];\r",
									"\r",
									"const answers = jsonData.items[0][\"answers\"];\r",
									"for (let i = 0; i < answers.length; i++) {\r",
									"delete jsonData.items[0][\"answers\"][i][\"created\"];\r",
									"delete jsonData.items[0][\"answers\"][i][\"modifiedById\"];\r",
									"delete jsonData.items[0][\"answers\"][i][\"modified\"];\r",
									"}\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":{\"bool\":{\"should\":[{\"match\":{\"questionText\":\"Real estate differs from \\\"real property\\\" in this regard:\"}},{\"match\":{\"feedback\":\"Real estate is the land and improvements\"}},{\"match\":{\"answer1\":\"Real estate is the land and improvements\"}},{\"match\":{\"answer2\":\"Real estate is the land and improvements\"}},{\"match\":{\"answer3\":\"Real estate is the land and improvements\"}},{\"match\":{\"answer4\":\"Real estate is the land and improvements\"}}]}},\"page\":1,\"size\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/questions/search?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"questions",
								"search"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.items[0][\"created\"];\r",
									"delete responseB.items[0][\"modifiedById\"];\r",
									"delete responseB.items[0][\"modified\"];\r",
									"\r",
									"const answers = responseB.items[0][\"answers\"];\r",
									"for (let i = 0; i < answers.length; i++) {\r",
									"delete responseB.items[0][\"answers\"][i][\"created\"];\r",
									"delete responseB.items[0][\"answers\"][i][\"modifiedById\"];\r",
									"delete responseB.items[0][\"answers\"][i][\"modified\"];\r",
									"}\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":{\"bool\":{\"should\":[{\"match\":{\"questionText\":\"Real estate differs from \\\"real property\\\" in this regard:\"}},{\"match\":{\"feedback\":\"Real estate is the land and improvements\"}},{\"match\":{\"answer1\":\"Real estate is the land and improvements\"}},{\"match\":{\"answer2\":\"Real estate is the land and improvements\"}},{\"match\":{\"answer3\":\"Real estate is the land and improvements\"}},{\"match\":{\"answer4\":\"Real estate is the land and improvements\"}}]}},\"page\":1,\"size\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/questions/search?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"questions",
								"search"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE Questions - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.item[\"created\"];\r",
									"delete jsonData.item[\"id\"];\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"active\":true,\"type\":\"multi\",\"answers\":[\"True1\",\"True2\",\"True3\",\"True4\"],\"questionText\":\"DEV A broker and a salesperson enter into an independent contractor\",\"correctAnswerIndex\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/questions?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE Questions - DEv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"id\"];\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"created\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"active\":true,\"type\":\"multi\",\"answers\":[\"True1\",\"True2\",\"True3\",\"True4\"],\"questionText\":\"DEV A broker and a salesperson enter into an independent contractor\",\"correctAnswerIndex\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/questions?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "QuestionBank",
			"item": [
				{
					"name": "Question-banks-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/question-banks/348/questions?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"question-banks",
								"348",
								"questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Question-banks-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/question-banks/348/questions?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"question-banks",
								"348",
								"questions"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Users - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.pages;\r",
									"delete jsonData.total;\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"        delete jsonData.items[i].lastLogin;\r",
									"    }\r",
									"}\r",
									"console.log(jsonData);\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/users?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.pages;\r",
									"delete responseB.total;\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"        delete responseB.items[i].lastLogin;\r",
									"    }\r",
									"}\r",
									"console.log(responseB);\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/users?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.pages;\r",
									"delete jsonData.total;\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"        delete jsonData.items[i].lastLogin;\r",
									"    }\r",
									"}\r",
									"console.log(jsonData);\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/users?token={{token_prod}}&filters[0][property]=email&filters[0][value]=mewing&filters[0][condition]=like&orderBy[0][property]=created&orderBy[0][value]=desc",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "filters[0][property]",
									"value": "email"
								},
								{
									"key": "filters[0][value]",
									"value": "mewing"
								},
								{
									"key": "filters[0][condition]",
									"value": "like"
								},
								{
									"key": "orderBy[0][property]",
									"value": "created"
								},
								{
									"key": "orderBy[0][value]",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.pages;\r",
									"delete responseB.total;\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"        delete responseB.items[i].lastLogin;\r",
									"    }\r",
									"}\r",
									"console.log(responseB);\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/users?token={{token_dev}}&filters[0][property]=email&filters[0][value]=mewing&filters[0][condition]=like&orderBy[0][property]=created&orderBy[0][value]=desc",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "filters[0][property]",
									"value": "email"
								},
								{
									"key": "filters[0][value]",
									"value": "mewing"
								},
								{
									"key": "filters[0][condition]",
									"value": "like"
								},
								{
									"key": "orderBy[0][property]",
									"value": "created"
								},
								{
									"key": "orderBy[0][value]",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE users-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"lastLogin\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"id\": 334440,\r\n        \"firstName\": \"Cody\",\r\n        \"lastName\": \"Mcclintock\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/users/:userID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users",
								":userID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "334440"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE users-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"lastLogin\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"id\": 334440,\r\n        \"firstName\": \"Cody\",\r\n        \"lastName\": \"Mcclintock\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/users/:userID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users",
								":userID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "334440"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"lastLogin\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/users/:userID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users",
								":userID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "334440"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"lastLogin\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/users/:userID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users",
								":userID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "334440"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-ID-disable - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"lastLogin\"];\r",
									"delete jsonData.item[\"token\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":334440\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/users/:userID/disable?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users",
								":userID",
								"disable"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17986"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-ID-disable - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"lastLogin\"];\r",
									"delete responseB.item[\"token\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":334440\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/users/:userID/disable?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users",
								":userID",
								"disable"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17986"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-ID-enable - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"lastLogin\"];\r",
									"delete jsonData.item[\"token\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/users/:userID/enable?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users",
								":userID",
								"enable"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17986"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-ID-enable - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"lastLogin\"];\r",
									"delete responseB.item[\"token\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/users/:userID/enable?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users",
								":userID",
								"enable"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17986"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users-ID-logs - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/users/:userID/logs?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users",
								":userID",
								"logs"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17986"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users-ID-logs - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/users/:userID/logs?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users",
								":userID",
								"logs"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17986"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-ID-reset-token - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"if(pm.response.code == \"200\"){\r",
									"    pm.collectionVariables.set(\"responseA\", 'success');\r",
									"}else{\r",
									"    pm.collectionVariables.set(\"responseA\", 'fail');\r",
									"}\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/users/:userID/reset-token?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users",
								":userID",
								"reset-token"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17986"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-ID-reset-token - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"\r",
									"if(pm.response.code == \"200\"){\r",
									"  pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(\"success\");\r",
									"});\r",
									"}else{\r",
									"     pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(\"fail\");\r",
									"});\r",
									"}\r",
									"\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/users/:userID/reset-token?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users",
								":userID",
								"reset-token"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17986"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enrollments - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.itemsCount;\r",
									"delete jsonData.itemsPerPage;\r",
									"delete jsonData.page;\r",
									"delete jsonData.pages;\r",
									"delete jsonData.total;\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].converted;\r",
									"        delete jsonData.items[i].created;\r",
									"        delete jsonData.items[i].examId;\r",
									"        delete jsonData.items[i].expiration;\r",
									"        delete jsonData.items[i].externalOrderId;\r",
									"        delete jsonData.items[i].id;\r",
									"        delete jsonData.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/users/:userID/enrollments?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users",
								":userID",
								"enrollments"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17571"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enrollments - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.itemsCount;\r",
									"delete responseB.itemsPerPage;\r",
									"delete responseB.page;\r",
									"delete responseB.pages;\r",
									"delete responseB.total;\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].converted;\r",
									"        delete responseB.items[i].created;\r",
									"        delete responseB.items[i].examId;\r",
									"        delete responseB.items[i].expiration;\r",
									"        delete responseB.items[i].externalOrderId;\r",
									"        delete responseB.items[i].id;\r",
									"        delete responseB.items[i].modified;\r",
									"    }\r",
									"}\r",
									"\r",
									"console.log(responseB);\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/users/:userID/enrollments?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users",
								":userID",
								"enrollments"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17571"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enrollments(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"delete jsonData.itemsCount;\r",
									"delete jsonData.itemsPerPage;\r",
									"delete jsonData.page;\r",
									"delete jsonData.pages;\r",
									"delete jsonData.total;\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].converted;\r",
									"        delete jsonData.items[i].created;\r",
									"        delete jsonData.items[i].examId;\r",
									"        delete jsonData.items[i].expiration;\r",
									"        delete jsonData.items[i].externalOrderId;\r",
									"        delete jsonData.items[i].id;\r",
									"        delete jsonData.items[i].modified;\r",
									"        delete jsonData.items[i].status;\r",
									"        if(jsonData.items[i].progresses.length > 0){\r",
									"            for(j=0;j<jsonData.items[i].progresses.length;j++){\r",
									"                delete jsonData.items[i].progresses[j].modified;\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/users/:userID/enrollments?token={{token_prod}}&includes[]=user&includes[]=exam&includes[]=organization&includes[]=progresses",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users",
								":userID",
								"enrollments"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "includes[]",
									"value": "user"
								},
								{
									"key": "includes[]",
									"value": "exam"
								},
								{
									"key": "includes[]",
									"value": "organization"
								},
								{
									"key": "includes[]",
									"value": "progresses"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17571"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enrollments(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.itemsCount;\r",
									"delete responseB.itemsPerPage;\r",
									"delete responseB.page;\r",
									"delete responseB.pages;\r",
									"delete responseB.total;\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].converted;\r",
									"        delete responseB.items[i].created;\r",
									"        delete responseB.items[i].examId;\r",
									"        delete responseB.items[i].expiration;\r",
									"        delete responseB.items[i].externalOrderId;\r",
									"        delete responseB.items[i].id;\r",
									"        delete responseB.items[i].modified;\r",
									"        delete responseB.items[i].status;\r",
									"        if(responseB.items[i].progresses.length > 0){\r",
									"            for(j=0;j<responseB.items[i].progresses.length;j++){\r",
									"                delete responseB.items[i].progresses[j].modified;\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"console.log(responseB);\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/users/:userID/enrollments?token={{token_dev}}&includes[]=user&includes[]=exam&includes[]=organization&includes[]=progresses",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users",
								":userID",
								"enrollments"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "includes[]",
									"value": "user"
								},
								{
									"key": "includes[]",
									"value": "exam"
								},
								{
									"key": "includes[]",
									"value": "organization"
								},
								{
									"key": "includes[]",
									"value": "progresses"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "17571"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE user log - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"id\"];\r",
									"delete jsonData.item[\"created\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 334440,\r\n    \"action\": \"enrollments\",\r\n    \"info\": null,\r\n    \"examModuleId\": null,\r\n    \"version\": \"2023.04.01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/users/:userID/logs?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users",
								":userID",
								"logs"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "334440"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE user log - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"id\"];\r",
									"delete responseB.item[\"created\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 334440,\r\n    \"action\": \"enrollments\",\r\n    \"info\": null,\r\n    \"examModuleId\": null,\r\n    \"version\": \"2023.04.01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/users/:userID/logs?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users",
								":userID",
								"logs"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "userID",
									"value": "334440"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create users - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"id\"];\r",
									"delete jsonData.item[\"token\"];\r",
									"delete jsonData.item[\"created\"];\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"joey1235@joey.com\",\r\n  \"password\": \"some123!#asdf\",\r\n  \"firstName\": \"test\",\r\n  \"lastName\": \"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/users?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create users - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"id\"];\r",
									"delete responseB.item[\"token\"];\r",
									"delete responseB.item[\"created\"];\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"joey1235@joey.com\",\r\n  \"password\": \"some123!#asdf\",\r\n  \"firstName\": \"test\",\r\n  \"lastName\": \"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/users?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReadinessScore",
			"item": [
				{
					"name": "student-ID-enrollments-ID-readinessscore - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/student/:studentID/enrollments/:enroID/readinessscore?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"student",
								":studentID",
								"enrollments",
								":enroID",
								"readinessscore"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "studentID",
									"value": "17571"
								},
								{
									"key": "enroID",
									"value": "18573"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "student-ID-enrollments-ID-readinessscore - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/student/:studentID/enrollments/:enroID/readinessscore?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"student",
								":studentID",
								"enrollments",
								":enroID",
								"readinessscore"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "studentID",
									"value": "17571"
								},
								{
									"key": "enroID",
									"value": "18573"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "student-ID-enrollments-ID-scorecardmetrics - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/student/:studentID/enrollments/:enroID/scorecardmetrics?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"student",
								":studentID",
								"enrollments",
								":enroID",
								"scorecardmetrics"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "studentID",
									"value": "17571"
								},
								{
									"key": "enroID",
									"value": "18573"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "student-ID-enrollments-ID-scorecardmetrics - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/student/:studentID/enrollments/:enroID/scorecardmetrics?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"student",
								":studentID",
								"enrollments",
								":enroID",
								"scorecardmetrics"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "studentID",
									"value": "17571"
								},
								{
									"key": "enroID",
									"value": "18573"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "student-ID-scorecardmetrics - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/student/:studentID/scorecardmetrics?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"student",
								":studentID",
								"scorecardmetrics"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "studentID",
									"value": "17571"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "student-ID-scorecardmetrics - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/student/:studentID/scorecardmetrics?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"student",
								":studentID",
								"scorecardmetrics"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "studentID",
									"value": "17571"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organization",
			"item": [
				{
					"name": "organizations - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"    }\r",
									"}\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/organizations?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"organizations"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "organizations - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"    }\r",
									"}\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/organizations?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"organizations"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "organizations(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"if(jsonData.items.length > 0){\r",
									"    for(i=0;i<jsonData.items.length;i++){\r",
									"        delete jsonData.items[i].modified;\r",
									"    }\r",
									"}\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/organizations?token={{token_prod}}&filters[0][property]=url&filters[0][value]=fastclass&filters[0][condition]=like&orderBy[0][property]=created&orderBy[0][value]=desc",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"organizations"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "filters[0][property]",
									"value": "url"
								},
								{
									"key": "filters[0][value]",
									"value": "fastclass"
								},
								{
									"key": "filters[0][condition]",
									"value": "like"
								},
								{
									"key": "orderBy[0][property]",
									"value": "created"
								},
								{
									"key": "orderBy[0][value]",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "organizations(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"if(responseB.items.length > 0){\r",
									"    for(i=0;i<responseB.items.length;i++){\r",
									"        delete responseB.items[i].modified;\r",
									"    }\r",
									"}\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/organizations?token={{token_dev}}&filters[0][property]=url&filters[0][value]=fastclass&filters[0][condition]=like&orderBy[0][property]=created&orderBy[0][value]=desc",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"organizations"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "filters[0][property]",
									"value": "url"
								},
								{
									"key": "filters[0][value]",
									"value": "fastclass"
								},
								{
									"key": "filters[0][condition]",
									"value": "like"
								},
								{
									"key": "orderBy[0][property]",
									"value": "created"
								},
								{
									"key": "orderBy[0][value]",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "organization-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/organizations/:organizationID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"organizations",
								":organizationID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "organizationID",
									"value": "1017"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "organization-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/organizations/:organizationID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"organizations",
								":organizationID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "organizationID",
									"value": "1017"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "organization-ID(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/organizations/:organizationID?token={{token_prod}}&includes[]=parent&includes[]=children",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"organizations",
								":organizationID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "includes[]",
									"value": "parent"
								},
								{
									"key": "includes[]",
									"value": "children"
								}
							],
							"variable": [
								{
									"key": "organizationID",
									"value": "1017"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "organization-ID(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/organizations/:organizationID?token={{token_dev}}&includes[]=parent&includes[]=children",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"organizations",
								":organizationID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "includes[]",
									"value": "parent"
								},
								{
									"key": "includes[]",
									"value": "children"
								}
							],
							"variable": [
								{
									"key": "organizationID",
									"value": "1017"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE organizations-ID - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"id\": 1017,\r\n        \"parentId\": 1001,\r\n        \"name\": \"HLtestOrg20150302140545a_dev\",\r\n        \"url\": \"http://testurl.hondroslearning.com\",\r\n        \"redirectUrl\": \"http://testurl.hondroslearning.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/organizations/:organizationID?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"organizations",
								":organizationID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							],
							"variable": [
								{
									"key": "organizationID",
									"value": "1017"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE organizations-ID - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"id\": 1017,\r\n        \"parentId\": 1001,\r\n        \"name\": \"HLtestOrg20150302140545a_dev\",\r\n        \"url\": \"http://testurl.hondroslearning.com\",\r\n        \"redirectUrl\": \"http://testurl.hondroslearning.com\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/organizations/:organizationID?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"organizations",
								":organizationID"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							],
							"variable": [
								{
									"key": "organizationID",
									"value": "1017"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create organizations - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"delete jsonData.item[\"modified\"];\r",
									"delete jsonData.item[\"created\"];\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"a test124\",\r\n  \"credits\": 100,\r\n  \"parentId\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/organizations?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"organizations"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create organizations - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"delete responseB.item[\"modified\"];\r",
									"delete responseB.item[\"created\"];\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"a test124\",\r\n  \"credits\": 100,\r\n  \"parentId\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/organizations?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"organizations"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Industry",
			"item": [
				{
					"name": "industries - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/industries?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"industries"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "industries - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/industries?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"industries"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "industries(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/industries?token={{token_prod}}&filters[0][property]=name&filters[0][value]=ins&filters[0][condition]=like",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"industries"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "filters[0][property]",
									"value": "name"
								},
								{
									"key": "filters[0][value]",
									"value": "ins"
								},
								{
									"key": "filters[0][condition]",
									"value": "like"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "industries(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/industries?token={{token_dev}}&filters[0][property]=name&filters[0][value]=ins&filters[0][condition]=like",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"industries"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "filters[0][property]",
									"value": "name"
								},
								{
									"key": "filters[0][value]",
									"value": "ins"
								},
								{
									"key": "filters[0][condition]",
									"value": "like"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Report",
			"item": [
				{
					"name": "Reports-Stats - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/reports/stats?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"reports",
								"stats"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reports-Stats - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/reports/stats?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"reports",
								"stats"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reports-Questions-Stats - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/reports/questions/stats?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"reports",
								"questions",
								"stats"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reports-Questions-Stats - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/reports/questions/stats?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"reports",
								"questions",
								"stats"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "States",
			"item": [
				{
					"name": "States - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/states?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"states"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "States - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/states?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"states"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "States(2) - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_prod}}/states?token={{token_prod}}&filters[0][property]=code&filters[0][value]=OH&filters[0][condition]=eq",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"states"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								},
								{
									"key": "filters[0][property]",
									"value": "code"
								},
								{
									"key": "filters[0][value]",
									"value": "OH"
								},
								{
									"key": "filters[0][condition]",
									"value": "eq"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "States(2) - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dev}}/states?token={{token_dev}}&filters[0][property]=code&filters[0][value]=OH&filters[0][condition]=eq",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"states"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								},
								{
									"key": "filters[0][property]",
									"value": "code"
								},
								{
									"key": "filters[0][value]",
									"value": "OH"
								},
								{
									"key": "filters[0][condition]",
									"value": "eq"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Answer",
			"item": [
				{
					"name": "Update Answer - Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// jsonData will contain the valid JSON object from the response body\r",
									"const jsonData = pm.response.json();\r",
									"const items= jsonData.items;\r",
									"//console.log(\"==items=\"+items);\r",
									"for (const [reqKey, reqValue] of Object.entries(items)) {\r",
									"    delete reqValue[\"modified\"];\r",
									"}\r",
									"\r",
									"// Variables and JSON Keys are case sensitive!\r",
									"pm.collectionVariables.set(\"responseA\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\"id\":52753,\"questionId\":12260,\"answerText\":\"Real estate is the land and improvements; real property is real estate with a house or other structure\",\"correct\":false,\"audioHash\":null,\"audioFile\":null,\"createdById\":null,\"created\":1424402893,\"modifiedById\":334440,\"modified\":1682674276,\"question\":null,\"createdBy\":null,\"modifiedBy\":null},{\"id\":52754,\"questionId\":15590,\"answerText\":\"Real estate is the land and improvements; real property is real estate plus any interests, benefits, or rights inherent within\",\"correct\":true,\"audioHash\":null,\"audioFile\":null,\"createdById\":null,\"created\":1424402893,\"modifiedById\":334440,\"modified\":1682674276,\"question\":null,\"createdBy\":null,\"modifiedBy\":null},{\"id\":52755,\"questionId\":15590,\"answerText\":\"Real estate is the land and improvements; real property is tangible personal or real property\",\"correct\":false,\"audioHash\":null,\"audioFile\":null,\"createdById\":null,\"created\":1424402893,\"modifiedById\":334440,\"modified\":1682674276,\"question\":null,\"createdBy\":null,\"modifiedBy\":null},{\"id\":52756,\"questionId\":15590,\"answerText\":\"Real estate is the land and improvements; real property is real estate that cannot be sold\",\"correct\":false,\"audioHash\":null,\"audioFile\":null,\"createdById\":null,\"created\":1424402893,\"modifiedById\":334440,\"modified\":1682674276,\"question\":null,\"createdBy\":null,\"modifiedBy\":null}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_prod}}/answers?token={{token_prod}}",
							"host": [
								"{{baseurl_prod}}"
							],
							"path": [
								"answers"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_prod}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Answer - DEV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseA = pm.collectionVariables.get(\"responseA\");\r",
									"const responseB = pm.response.json();\r",
									"const items= responseB.items;\r",
									"//console.log(\"==items=\"+items);\r",
									"for (const [reqKey, reqValue] of Object.entries(items)) {\r",
									"    delete reqValue[\"modified\"];\r",
									"}\r",
									"pm.test(\"Compare responses\", function () {\r",
									"    pm.expect(responseA).to.equal(JSON.stringify(responseB));\r",
									"});\r",
									"pm.collectionVariables.unset(\"responseA\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\"id\":52753,\"questionId\":12260,\"answerText\":\"Real estate is the land and improvements; real property is real estate with a house or other structure\",\"correct\":false,\"audioHash\":null,\"audioFile\":null,\"createdById\":null,\"created\":1424402893,\"modifiedById\":334440,\"modified\":1682674276,\"question\":null,\"createdBy\":null,\"modifiedBy\":null},{\"id\":52754,\"questionId\":15590,\"answerText\":\"Real estate is the land and improvements; real property is real estate plus any interests, benefits, or rights inherent within\",\"correct\":true,\"audioHash\":null,\"audioFile\":null,\"createdById\":null,\"created\":1424402893,\"modifiedById\":334440,\"modified\":1682674276,\"question\":null,\"createdBy\":null,\"modifiedBy\":null},{\"id\":52755,\"questionId\":15590,\"answerText\":\"Real estate is the land and improvements; real property is tangible personal or real property\",\"correct\":false,\"audioHash\":null,\"audioFile\":null,\"createdById\":null,\"created\":1424402893,\"modifiedById\":334440,\"modified\":1682674276,\"question\":null,\"createdBy\":null,\"modifiedBy\":null},{\"id\":52756,\"questionId\":15590,\"answerText\":\"Real estate is the land and improvements; real property is real estate that cannot be sold\",\"correct\":false,\"audioHash\":null,\"audioFile\":null,\"createdById\":null,\"created\":1424402893,\"modifiedById\":334440,\"modified\":1682674276,\"question\":null,\"createdBy\":null,\"modifiedBy\":null}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl_dev}}/answers?token={{token_dev}}",
							"host": [
								"{{baseurl_dev}}"
							],
							"path": [
								"answers"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token_dev}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token_prod",
			"value": ""
		},
		{
			"key": "email_prod",
			"value": "",
			"type": "string"
		},
		{
			"key": "baseurl_prod",
			"value": "https://d-api57.compucram.com/api"
		},
		{
			"key": "token_dev",
			"value": ""
		},
		{
			"key": "email_dev",
			"value": ""
		},
		{
			"key": "baseurl_dev",
			"value": "https://d-api8.compucram.com/api",
			"type": "string"
		},
		{
			"key": "Updatecode_prod",
			"value": "",
			"type": "string"
		},
		{
			"key": "Updatecode_dev",
			"value": "",
			"type": "string"
		},
		{
			"key": "responseA",
			"value": ""
		}
	]
}